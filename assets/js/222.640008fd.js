(window.webpackJsonp=window.webpackJsonp||[]).push([[222],{692:function(v,_,t){"use strict";t.r(_);var s=t(29),r=Object(s.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("h2",{attrs:{id:"事务概念"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务概念"}},[v._v("#")]),v._v(" 1️⃣ 事务概念")]),v._v(" "),t("h3",{attrs:{id:"事务的定义"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务的定义"}},[v._v("#")]),v._v(" 事务的定义")]),v._v(" "),t("p",[t("strong",[v._v("在数据库系统中")]),v._v("：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("是一组一起执行的操作序列")]),v._v("；")]),v._v(" "),t("li",[t("strong",[v._v("数据库系统中的逻辑工作单元")]),v._v("；")])]),v._v(" "),t("p",[t("strong",[v._v("在关系数据库中")]),v._v("：")]),v._v(" "),t("ul",[t("li",[t("strong",[v._v("一个事务包含的操作可以是一条 SQL 语句、一组 SQL 语句或者整个程序")]),v._v("；")])]),v._v(" "),t("p",[v._v("SQL 中：")]),v._v(" "),t("ul",[t("li",[t("code",[v._v("BEGIN TRANSACTION")]),v._v(" "),t("strong",[v._v("表示开始事务")]),v._v("；")]),v._v(" "),t("li",[t("code",[v._v("COMMIT")]),v._v(" "),t("strong",[v._v("表示事务执行成功地结束")]),v._v("；数据库进入一个新的正确状态；")]),v._v(" "),t("li",[t("code",[v._v("ROLLBACK")]),v._v(" "),t("strong",[v._v("表示事务运行过程中发生了某种故障")]),v._v("，事务不能继续执行；同时撤销事务中对数据库的所有已完成的更新操作，数据库应恢复该事务到初始状态，即事务被回滚；")])]),v._v(" "),t("h3",{attrs:{id:"事务的-acid-特性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务的-acid-特性"}},[v._v("#")]),v._v(" 事务的 ACID 特性")]),v._v(" "),t("p",[t("strong",[v._v("事务具有 4 个特性：原子性、一致性、隔离性、持久性；")])]),v._v(" "),t("p",[t("strong",[v._v("原子性")]),v._v("：事务是原子的，"),t("strong",[v._v("即事务对数据库的操作是一个不可分割的单元")]),v._v("；")]),v._v(" "),t("ul",[t("li",[v._v("事务必须作为整体执行或者根本不执行。要么执行完，要么没有执行；")]),v._v(" "),t("li",[v._v("意味着每个事务要么提交，要么因异常终止而回滚；如果没有执行完，则不能产生任何效果；")]),v._v(" "),t("li",[v._v("通过 DBMS 的事务管理器实现，是数据库系统本身的职责；")])]),v._v(" "),t("p",[t("strong",[v._v("一致性")]),v._v("："),t("strong",[v._v("指事务执行的结果必须使数据库从一个一执性状态变到另一个一致性状态")]),v._v("；")]),v._v(" "),t("p",[t("strong",[v._v("隔离性")]),v._v("：指一个事务内部的操作及使用的数据对其他并发事务是隔离的，并发执行的各个事务之间不能互相干扰。")]),v._v(" "),t("p",[t("strong",[v._v("持久性")]),v._v("：指一个事务一旦提交，它对数据库中的数据的改变是永久性的。接下来的数据操作或者故障不应该对其执行结果有任何影响，")]),v._v(" "),t("p",[t("strong",[v._v("事务的 ACID 特性是数据库保持一致性的前提")]),v._v("。当数据库支持 ACID 特性时，数据库就能维持一个一致的、当前最新的现实世界的模型，并且事务一直能给用户提供正确、最新的响应；")]),v._v(" "),t("p",[t("strong",[v._v("保证事务 ACID 特性是事务管理的重要任务")]),v._v("；")]),v._v(" "),t("h3",{attrs:{id:"事务的管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务的管理"}},[v._v("#")]),v._v(" 事务的管理")]),v._v(" "),t("p",[v._v("DBMS 中，保证事务的正确执行是事务管理器的工作；")]),v._v(" "),t("p",[v._v("两个主要部分：")]),v._v(" "),t("ul",[t("li",[v._v("并发控制管理器；")]),v._v(" "),t("li",[v._v("恢复管理器；")])]),v._v(" "),t("h2",{attrs:{id:"事务的恢复"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#事务的恢复"}},[v._v("#")]),v._v(" 2️⃣ 事务的恢复")]),v._v(" "),t("p",[v._v("把数据库从错误状态恢复到某一已知的正确状态（一致性或者完整性状态）的功能；")]),v._v(" "),t("p",[v._v("通过 DBMS 的事务恢复机制实现，恢复管理器完成；")]),v._v(" "),t("h3",{attrs:{id:"故障机器错误状态"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#故障机器错误状态"}},[v._v("#")]),v._v(" 故障机器错误状态")]),v._v(" "),t("ul",[t("li",[v._v("事务内部的故障")]),v._v(" "),t("li",[v._v("系统故障")]),v._v(" "),t("li",[v._v("截至故障")])]),v._v(" "),t("h3",{attrs:{id:"恢复技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#恢复技术"}},[v._v("#")]),v._v(" 恢复技术")]),v._v(" "),t("ul",[t("li",[v._v("日志 log")]),v._v(" "),t("li",[v._v("数据转储")])]),v._v(" "),t("h2",{attrs:{id:"并发控制"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发控制"}},[v._v("#")]),v._v(" 3️⃣ 并发控制")]),v._v(" "),t("p",[v._v("为了保证并发执行的事务能保持隔离性的整个过程称为并发控制；")]),v._v(" "),t("p",[v._v("DBMS 的并发控制管理器采用一定的并发控制技术实现并发控制；")]),v._v(" "),t("h3",{attrs:{id:"并发控制必要性"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#并发控制必要性"}},[v._v("#")]),v._v(" 并发控制必要性")]),v._v(" "),t("p",[t("strong",[v._v("事务的调度")]),v._v("：")]),v._v(" "),t("p",[v._v("为了保证事务的隔离性和数据库的一致性，并发控制器需要对并发操作进行正确调度。")]),v._v(" "),t("ul",[t("li",[v._v("调度")]),v._v(" "),t("li",[v._v("串行调度")])]),v._v(" "),t("p",[t("strong",[v._v("并发事务的非串行调度带来的数据不一致的问题")]),v._v("：")]),v._v(" "),t("ol",[t("li",[t("p",[t("strong",[v._v("更新丢失")])])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("脏读")])]),v._v(" "),t("p",[v._v("脏数据：还没有提交的事务所写的数据；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("不可重复读")])])])]),v._v(" "),t("h3",{attrs:{id:"封锁技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#封锁技术"}},[v._v("#")]),v._v(" 封锁技术")]),v._v(" "),t("p",[v._v("通过在数据对象上维护 “锁” 以"),t("strong",[v._v("防止非可串行化")]),v._v("的行为；")]),v._v(" "),t("ul",[t("li",[v._v("当一个事务在对其需要访问的数据对象进行操作之前，先向系统发出请求，"),t("strong",[v._v("获得在它访问的数据库对象上的锁")]),v._v("，以防止其他事务几乎同一时间访问这些数据并因此引入非可串行化的可能。")]),v._v(" "),t("li",[v._v("封锁技术可实现"),t("strong",[v._v("冲突可串行化")]),v._v("；")])]),v._v(" "),t("p",[t("strong",[v._v("锁")])]),v._v(" "),t("p",[v._v("封锁模式：")]),v._v(" "),t("ul",[t("li",[t("p",[v._v("共享锁 S（用于读）")]),v._v(" "),t("p",[v._v("若事务 T 对数据对象 A 加上共享锁，则"),t("strong",[v._v("事务 T 可以读 A 但不能写 A")]),v._v("；其他事务只能对 A 加共享锁，而不能加排他锁，直到 T 释放 A 上的共享锁；"),t("strong",[v._v("保证了其他事务可以读 A，但在 T 释放 A 上的共享锁之前不能对 A 作任何更新。")])])]),v._v(" "),t("li",[t("p",[v._v("排他锁 X（用于写）")]),v._v(" "),t("p",[v._v("若事务 T 对数据对象加上排他锁，则"),t("strong",[v._v("只允许 T 读和写 A")]),v._v("，"),t("strong",[v._v("其他任何事务都不能再对 A 加任何类型的锁")]),v._v(" ，直到 T 释放 A 上的排他锁。"),t("strong",[v._v("保证了其他事务在事务 T 释放 A 上的排他锁之前不能读取和更新 A。")])])])]),v._v(" "),t("p",[t("strong",[v._v("相容性矩阵")]),v._v("：")]),v._v(" "),t("p",[v._v("是描述锁管理策略的简单方法 /")]),v._v(" "),t("p",[t("strong",[v._v("两阶段封锁协议")])]),v._v(" "),t("ul",[t("li",[v._v("获得锁阶段；（拓展）")]),v._v(" "),t("li",[v._v("释放锁阶段；（收缩）")])]),v._v(" "),t("p",[t("strong",[v._v("死锁")])]),v._v(" "),t("p",[v._v("并发执行的事务由于竞争资源可以达到存在死锁的状态，分为两种：")]),v._v(" "),t("ul",[t("li",[t("p",[t("strong",[v._v("活死锁")]),v._v("（活锁）： 部分事务长期等待，但其他事务仍然能继续运行，这种长期等待状态为活锁；")]),v._v(" "),t("p",[v._v("避免活锁：先来先服务；")])]),v._v(" "),t("li",[t("p",[t("strong",[v._v("死死锁")]),v._v("（死锁）：循环等待资源；")])])])])}),[],!1,null,null,null);_.default=r.exports}}]);