(window.webpackJsonp=window.webpackJsonp||[]).push([[71],{401:function(t,s,a){"use strict";a.r(s);var n=a(3),e=Object(n.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("JavaScript 不允许"),s("strong",[t._v("自定义运算符对对象的处理方式")]),t._v("。与其他一些编程语言（Ruby，C++）不同，"),s("strong",[t._v("无法实现特殊的对象处理方法来处理加法")]),t._v("（或其他运算）。")]),t._v(" "),s("p",[t._v("在此类运算的情况下，"),s("strong",[t._v("对象会被自动转换为原始值")]),t._v("，然后对这些原始值进行运算，并得到运算结果（"),s("strong",[t._v("也是一个原始值")]),t._v("）。（⭐️ 重要限制：对象运算的结果不能是另一个对象）")]),t._v(" "),s("ul",[s("li",[t._v("例如，无法使用对象来表示向量或矩阵（或成就或其他），把它们相加并期望得到一个 “总和” 向量作为结果。")]),t._v(" "),s("li",[t._v("从技术上无法实现此类运算，所以在实际项目中不存在对对象的数学运算。")])]),t._v(" "),s("h2",{attrs:{id:"转换规则"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换规则"}},[t._v("#")]),t._v(" 转换规则")]),t._v(" "),s("ul",[s("li",[t._v("对于布尔值类型。对象没有转换为布尔值，所有的对象在布尔上下文（context）中均为  "),s("code",[t._v("true")]),t._v(" 。")]),t._v(" "),s("li",[t._v("数字转换发生在对象相减或应用数学函数时。例如， "),s("code",[t._v("Date")]),t._v("  对象可以相减， "),s("code",[t._v("date1 - date2")]),t._v("  的结果是两个日期之间的差值。")]),t._v(" "),s("li",[t._v("对于字符串类型。通常为  "),s("code",[t._v("alert(obj)")]),t._v("  这样输出一个对象和类似的上下文中。")])]),t._v(" "),s("h3",{attrs:{id:"hint"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hint"}},[t._v("#")]),t._v(" hint")]),t._v(" "),s("p",[t._v("JavaScript 对象的类型转换在各种情况下有三种变体（"),s("a",{attrs:{href:"https://tc39.github.io/ecma262/#sec-toprimitive",target:"_blank",rel:"noopener noreferrer"}},[t._v("规范"),s("OutboundLink")],1),t._v(" ）：")]),t._v(" "),s("ul",[s("li",[s("p",[s("code",[t._v('"string"')]),t._v(" ：对象到字符串的转换，当对期望一个字符串的对象执行操作时，例如  "),s("code",[t._v("alert")]),t._v("  ：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将对象作为属性键")]),t._v("\nanotherObj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v('"number"')]),t._v("  ：对象到数字的转换，例如进行数学运算时：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 显式转换")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数学运算（除了二元加法）")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 一元加法")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" delta "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" date1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" date2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 小于/大于的比较")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" greater "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" user1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" user2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("“default”")]),t._v("  ：在少数情况下发生，当运算符 **「不确定」期望值的类型 ** 时。（有默认 hint）")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 二元加法使用默认 hint")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" total "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj1 "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" obj2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// obj == number 使用默认 hint")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("ul",[s("li",[t._v("二元加法  "),s("code",[t._v("+")]),t._v("  可用于字符串（连接），也可以用于数字（相加）。因此，当二元加法得到对象类型的参数时，它将依据  "),s("code",[t._v('"default"')]),t._v("  hint 来对其进行转换。")]),t._v(" "),s("li",[t._v("如果对象被用于与字符串、数字或 symbol 进行  "),s("code",[t._v("==")]),t._v("  比较，这时到底应该进行哪种转换也不是很明确，因此使用  "),s("code",[t._v('"default"')]),t._v("  hint。")]),t._v(" "),s("li",[t._v("像  "),s("code",[t._v("<")]),t._v("  和  "),s("code",[t._v(">")]),t._v("  这样的小于 / 大于比较运算符，也可以同时用于字符串和数字。不过，它们使用  "),s("code",[t._v("“number”")]),t._v("  hint，而不是  "),s("code",[t._v("“default”")]),t._v(" 。这是历史原因。")])])])]),t._v(" "),s("p",[t._v("以上的 "),s("strong",[t._v("hint")]),t._v(" 规则出了一种情况以外，所有内建对象都以和  "),s("code",[t._v('"number"')]),t._v("  相同的方式实现  "),s("code",[t._v('"default"')]),t._v("  转换。")]),t._v(" "),s("p",[s("strong",[t._v("为了进行转换，JavaScript 尝试查找并调用三个对象方法：")])]),t._v(" "),s("ol",[s("li",[t._v("调用  "),s("code",[t._v("obj[Symbol.toPrimitive](hint)")]),t._v("  —— 带有 symbol 键  "),s("code",[t._v("Symbol.toPrimitive")]),t._v(" （系统 symbol）的方法，如果这个方法存在的话，")]),t._v(" "),s("li",[t._v("否则，如果 hint 是  "),s("code",[t._v('"string"')]),t._v("  —— 尝试调用  "),s("code",[t._v("obj.toString()")]),t._v("  或  "),s("code",[t._v("obj.valueOf()")]),t._v(" ，无论哪个存在。")]),t._v(" "),s("li",[t._v("否则，如果 hint 是  "),s("code",[t._v('"number"')]),t._v("  或  "),s("code",[t._v('"default"')]),t._v("  —— 尝试调用  "),s("code",[t._v("obj.valueOf()")]),t._v("  或  "),s("code",[t._v("obj.toString()")]),t._v(" ，无论哪个存在。")])]),t._v(" "),s("h3",{attrs:{id:"symbol-toprimitive"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#symbol-toprimitive"}},[t._v("#")]),t._v(" "),s("code",[t._v("Symbol.toPrimitive")])]),t._v(" "),s("p",[t._v("这是一个内建的 symbol，它被用来给转换方法命名：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("obj"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("hint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里是将此对象转换为原始值的代码")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 它必须返回一个原始值")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// hint = "string"、"number" 或 "default" 中的一个')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("如果  "),s("code",[t._v("Symbol.toPrimitive")]),t._v("  方法存在，则它会被用于所有 hint，无需更多其他方法。")]),t._v(" "),s("p",[t._v("🌰  "),s("code",[t._v("user")]),t._v("   对象 实现  "),s("code",[t._v("Symbol.toPrimitive")]),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"John"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("money")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Symbol"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toPrimitive"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("hint")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("hint: ")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hint"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" hint "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"string"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('{name: "')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"}')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// hint: string -> {name: "John"}')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hint: number -> 1000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// hint: default -> 1500")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("p",[t._v("从中，根据转换的不同， "),s("code",[t._v("user")]),t._v("  变成一个自描述字符串或者一个金额。 "),s("code",[t._v("user[Symbol.toPrimitive]")]),t._v("  方法处理了所有的转换情况。")]),t._v(" "),s("h3",{attrs:{id:"tostring-valueof"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#tostring-valueof"}},[t._v("#")]),t._v(" "),s("code",[t._v("toString/valueOf")])]),t._v(" "),s("blockquote",[s("p",[t._v("如果没有  "),s("code",[t._v("Symbol.toPrimitive")]),t._v(" ，那么 JavaScript 将尝试寻找  "),s("code",[t._v("toString")]),t._v("  和  "),s("code",[t._v("valueOf")]),t._v("  方法：")]),t._v(" "),s("ul",[s("li",[t._v("对于  "),s("code",[t._v('"string"')]),t._v("  hint：调用  "),s("code",[t._v("toString")]),t._v("  方法，如果它不存在，则调用  "),s("code",[t._v("valueOf")]),t._v("  方法（因此，对于字符串转换，优先调用  "),s("code",[t._v("toString")]),t._v(" ）。")]),t._v(" "),s("li",[t._v("对于其他 hint：调用  "),s("code",[t._v("valueOf")]),t._v("  方法，如果它不存在，则调用  "),s("code",[t._v("toString")]),t._v("  方法（因此，对于数学运算，优先调用  "),s("code",[t._v("valueOf")]),t._v("  方法）。")])]),t._v(" "),s("p",[s("code",[t._v("toString")]),t._v("  和  "),s("code",[t._v("valueOf")]),t._v("  方法很早己有了。它们不是 symbol（那时候还没有 symbol 这个概念），而是「常规的」字符串命名的方法。它们提供了一种可选的 “老派” 的实现转换的方法。")]),t._v(" "),s("p",[t._v("这些方法必须返回一个原始值。如果  "),s("code",[t._v("toString")]),t._v("  或  "),s("code",[t._v("valueOf")]),t._v("  返回了一个对象，那么返回值会被忽略（和这里没有方法的时候相同）。")])]),t._v(" "),s("p",[t._v("默认情况下，普通对象具有  "),s("code",[t._v("toString")]),t._v("  和  "),s("code",[t._v("valueOf")]),t._v("  方法：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("toString")]),t._v("  方法返回一个字符串  "),s("code",[t._v('"[object Object]"')]),t._v(" 。")]),t._v(" "),s("li",[s("code",[t._v("valueOf")]),t._v("  方法"),s("strong",[t._v("返回对象自身")]),t._v("。（忽略）")])]),t._v(" "),s("p",[t._v("🌰 例子：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Simon'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [object Oject]")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("实现这些方法自定义转换：")]),t._v(" "),s("p",[t._v("🌰 例子：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Simon'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("money")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  \n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('{name: "')]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"')]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// {name: "Simon"}')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1000")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1500")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br")])]),s("blockquote",[s("p",[t._v("可以看到执行的动作和前面使用  "),s("code",[t._v("Symbol.toPrimitive")]),t._v("  的那个例子相同。")])]),t._v(" "),s("p",[s("strong",[t._v("通常希望有一个「全能」的地方来处理所有原始转换")]),t._v("。在这种情况下，可以只实现  "),s("code",[t._v("toString")]),t._v(" ，例如：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("name")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Simon'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toString -> Simon")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("user "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("500")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// toString -> Simon500")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br")])]),s("blockquote",[s("p",[t._v("如果没有  "),s("code",[t._v("Symbol.toPrimitive")]),t._v("  和  "),s("code",[t._v("valueOf")]),t._v(" ， "),s("code",[t._v("toString")]),t._v("  将处理所有原始转换。")])]),t._v(" "),s("h3",{attrs:{id:"转换可以返回任何原始类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#转换可以返回任何原始类型"}},[t._v("#")]),t._v(" 转换可以返回任何原始类型")]),t._v(" "),s("p",[t._v("⭐️ "),s("strong",[t._v("所有的原始转换方法，不一定会返回 “hint” 的原始值。")])]),t._v(" "),s("ul",[s("li",[t._v("没有限制  "),s("code",[t._v("toString()")]),t._v("  是否返回字符串，或  "),s("code",[t._v("Symbol.toPrimitive")]),t._v("  方法是否为  "),s("code",[t._v('"number"')]),t._v("  hint 返回数字。")]),t._v(" "),s("li",[t._v("唯一强制性的事情是：这些方法必须返回一个原始值，而不是对象。")])]),t._v(" "),s("blockquote",[s("p",[t._v("由于历史原因，如果  "),s("code",[t._v("toString")]),t._v("  或  "),s("code",[t._v("valueOf")]),t._v("  返回一个对象，则不会出现 error，但是这种值会被忽略（就像这种方法根本不存在）。这是因为在 JavaScript 语言发展初期，没有很好的 「error」 的概念。")]),t._v(" "),s("p",[t._v("相反， "),s("code",[t._v("Symbol.toPrimitive")]),t._v("  更严格，它 "),s("strong",[t._v("必须")]),t._v(" 返回一个原始值，否则就会出现 error。")])]),t._v(" "),s("h3",{attrs:{id:"进一步的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#进一步的转换"}},[t._v("#")]),t._v(" 进一步的转换")]),t._v(" "),s("p",[t._v("许多运算符和函数执行类型转换，例如乘法  "),s("code",[t._v("*")]),t._v("  将操作数转换为数字。")]),t._v(" "),s("p",[t._v("如果将对象作为参数传递，则会出现两个运算阶段：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("对象被转换为原始值")]),t._v("（通过前面我们描述的规则）。")]),t._v(" "),s("li",[t._v("如果还需要进一步计算，则生成的原始值会被进一步转换。")])]),t._v(" "),s("p",[t._v("🌰 例子：")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("blockquote",[s("ul",[s("li",[t._v("乘法  "),s("code",[t._v("obj * 2")]),t._v("  首先将对象转换为原始值（字符串 “2”）。")]),t._v(" "),s("li",[t._v("之后  "),s("code",[t._v('"2" * 2')]),t._v("  变为  "),s("code",[t._v("2 * 2")]),t._v(" （字符串被转换为数字）。")])])]),t._v(" "),s("p",[t._v("🌰 例子："),s("strong",[t._v("⚠️ 对于二元加法会将其连接为字符串，因为它更愿意接受字符串。")])]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"2"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("alert")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 22")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br")])]),s("h2",{attrs:{id:"对象转换总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对象转换总结"}},[t._v("#")]),t._v(" 对象转换总结")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("对象到原始值的转换，是由许多期望以原始值作为值的"),s("strong",[t._v("内建函数和运算符自动调用")]),t._v("的。")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("Symbol.primitive")]),t._v("  /  "),s("code",[t._v("toString")]),t._v("  和  "),s("code",[t._v("valueOf")]),t._v("  是内建的对象方法，可以重新实现。")])]),t._v(" "),s("li",[s("p",[t._v("三种 “hint”：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v('"string"')]),t._v(" （对于  "),s("code",[t._v("alert")]),t._v("  和其他需要字符串的操作）")]),t._v(" "),s("li",[s("code",[t._v('"number"')]),t._v(" （对于数学运算）")]),t._v(" "),s("li",[s("code",[t._v('"default"')]),t._v(" （少数运算符，通常对象以和  "),s("code",[t._v('"number"')]),t._v("  相同的方式实现  "),s("code",[t._v('"default"')]),t._v("  转换）")])])]),t._v(" "),s("li",[s("p",[t._v("转换规则：")]),t._v(" "),s("ul",[s("li",[t._v("调用  "),s("code",[t._v("obj[Symbol.toPrimitive](hint)")]),t._v("  如果这个方法存在；")]),t._v(" "),s("li",[t._v("否则，如果 hint 是  "),s("code",[t._v('"string"')]),t._v(" ：\n"),s("ul",[s("li",[t._v("尝试调用  "),s("code",[t._v("obj.toString()")]),t._v("  或  "),s("code",[t._v("obj.valueOf()")]),t._v(" ，无论哪个存在。")])])]),t._v(" "),s("li",[t._v("否则，如果 hint 是  "),s("code",[t._v('"number"')]),t._v("  或者  "),s("code",[t._v('"default"')]),t._v(" ：\n"),s("ul",[s("li",[t._v("尝试调用  "),s("code",[t._v("obj.valueOf()")]),t._v("  或  "),s("code",[t._v("obj.toString()")]),t._v(" ，无论哪个存在。")])])]),t._v(" "),s("li",[t._v("所有这些方法都必须返回一个原始值才能工作（如果已定义）。")])])])]),t._v(" "),s("blockquote",[s("p",[s("strong",[t._v("实际使用中，通常只实现  "),s("code",[t._v("toString()")]),t._v("  就足够了。一般返回对象的「可读表示」，用于调试或者日记。")])])]),t._v(" "),s("blockquote",[s("p",[t._v("🤯 后知后觉，这不就是 Java 的类中，可以重写  "),s("code",[t._v("toString()")]),t._v("  方法一个道理吗。如果不写  "),s("code",[t._v("toString()")]),t._v("  方法打印整个类（的实例对象）就只输出类名和类的地址（？）  ，而重写了  "),s("code",[t._v("toString()")]),t._v("   方法就可以指定打印的内容。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);